// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6964.FRCBearBotsTrial2;

import edu.wpi.first.wpilibj.DoubleSolenoid;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PWMVictorSPX;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSubsystemBottomLeft;
    public static SpeedController driveSubsystemTopLeft;
    public static SpeedControllerGroup driveSubsystemLeft;
    public static SpeedController driveSubsystemBottomRight;
    public static SpeedController driveSubsystemTopRight;
    public static SpeedControllerGroup driveSubsystemRight;
    public static DifferentialDrive driveSubsystemDifferentialDrive1;
    public static SpeedController armSubsystemArmController;
    public static DoubleSolenoid handSubsystemRightSolenoid;
    public static DoubleSolenoid handSubsystemLeftSolenoid;
    public static Compressor handSubsystemPneumaticsCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSubsystemBottomLeft = new Spark(0);
        LiveWindow.addActuator("DriveSubsystem", "BottomLeft", (Spark) driveSubsystemBottomLeft);
        driveSubsystemBottomLeft.setInverted(false);
        driveSubsystemTopLeft = new Spark(1);
        LiveWindow.addActuator("DriveSubsystem", "TopLeft", (Spark) driveSubsystemTopLeft);
        driveSubsystemTopLeft.setInverted(false);
        driveSubsystemLeft = new SpeedControllerGroup(driveSubsystemBottomLeft, driveSubsystemTopLeft  );
        LiveWindow.addActuator("DriveSubsystem", "Left", driveSubsystemLeft);
        
        driveSubsystemBottomRight = new Spark(2);
        LiveWindow.addActuator("DriveSubsystem", "BottomRight", (Spark) driveSubsystemBottomRight);
        driveSubsystemBottomRight.setInverted(false);
        driveSubsystemTopRight = new Spark(3);
        LiveWindow.addActuator("DriveSubsystem", "TopRight", (Spark) driveSubsystemTopRight);
        driveSubsystemTopRight.setInverted(false);
        driveSubsystemRight = new SpeedControllerGroup(driveSubsystemBottomRight, driveSubsystemTopRight  );
        LiveWindow.addActuator("DriveSubsystem", "Right", driveSubsystemRight);
        
        driveSubsystemDifferentialDrive1 = new DifferentialDrive(driveSubsystemLeft, driveSubsystemRight);
        LiveWindow.addActuator("DriveSubsystem", "Differential Drive 1", driveSubsystemDifferentialDrive1);
        driveSubsystemDifferentialDrive1.setSafetyEnabled(false);
        driveSubsystemDifferentialDrive1.setExpiration(0.1);
        driveSubsystemDifferentialDrive1.setMaxOutput(1.0);

        armSubsystemArmController = new PWMVictorSPX(4);
        LiveWindow.addActuator("ArmSubsystem", "Arm Controller", (PWMVictorSPX) armSubsystemArmController);
        armSubsystemArmController.setInverted(false);
        handSubsystemRightSolenoid = new DoubleSolenoid(1, 3, 2);
        LiveWindow.addActuator("HandSubsystem", "Right Solenoid", handSubsystemRightSolenoid);
        
        handSubsystemLeftSolenoid = new DoubleSolenoid(1, 0, 1);
        LiveWindow.addActuator("HandSubsystem", "Left Solenoid", handSubsystemLeftSolenoid);
        
        handSubsystemPneumaticsCompressor = new Compressor(1);
        LiveWindow.addActuator("HandSubsystem", "Pneumatics Compressor", handSubsystemPneumaticsCompressor);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
