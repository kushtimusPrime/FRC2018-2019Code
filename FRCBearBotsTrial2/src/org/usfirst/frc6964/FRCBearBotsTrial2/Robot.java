// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc6964.FRCBearBotsTrial2;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfRect;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.objdetect.Objdetect;
import org.usfirst.frc6964.FRCBearBotsTrial2.commands.*;
import org.usfirst.frc6964.FRCBearBotsTrial2.subsystems.*;

import com.sun.javafx.font.directwrite.RECT;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

	Command autonomousCommand;
	SendableChooser<Command> chooser = new SendableChooser<>();
	String theMessage = "";
	private CascadeClassifier cascade;
	private int absoluteSize;

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveSubsystem driveSubsystem;
	public static ArmSubsystem armSubsystem;
	public static HandSubsystem handSubsystem;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	UsbCamera server;

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSubsystem = new DriveSubsystem();
		armSubsystem = new ArmSubsystem();
		handSubsystem = new HandSubsystem();

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// Add commands to Autonomous Sendable Chooser
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

		// chooser.addObject("Middle", new Middle());
		chooser.addDefault("Autonomous Command", new AutonomousCommand());

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		SmartDashboard.putData("Auto mode", chooser);
		if (theMessage.equals("")) {
			theMessage = DriverStation.getInstance().getGameSpecificMessage();
		}

		// vision
		//server = CameraServer.getInstance().startAutomaticCapture(0);
		//server = CameraServer.getInstance().startAutomaticCapture(1);
		
		/*this.cascade = new CascadeClassifier("top2.xml");
		this.absoluteSize = 0;
		new Thread(() -> {
			server = CameraServer.getInstance().startAutomaticCapture(0);
			//server.startAutomaticCapture(1); only use one camera
			CvSink cvSink = CameraServer.getInstance().getVideo(); // gives video to openCV
			CvSource outputStream = CameraServer.getInstance().putVideo("Detect Cube", 640, 480); // takes in the new modified image with 640x480 resolution
			Mat source = new Mat();
			while (!Thread.interrupted()) {
				cvSink.grabFrame(source);
				this.detectAndDisplay(source);
				outputStream.putFrame(source);
			}
		}).start();*/
        server = CameraServer.getInstance().startAutomaticCapture(0);
        server.setResolution(640, 480);
         CvSink cvSink = CameraServer.getInstance().getVideo();
         CvSource outputStream = CameraServer.getInstance().putVideo("Yellow", 640, 480);
         
         Mat source = new Mat();
         Mat blurredImage = new Mat();
         Mat hsvImage = new Mat();
         Mat mask = new Mat();
         Mat output = new Mat();
        Thread t=new Thread(() -> {
            while(!Thread.interrupted()) {
                cvSink.grabFrame(source);
                Imgproc.blur(source, blurredImage, new Size(7,7));
                Imgproc.cvtColor(blurredImage, hsvImage, Imgproc.COLOR_BGR2HSV);
                Scalar minValues = new Scalar(20, 100, 100);
                Scalar maxValues = new Scalar(30, 255, 255);
                Core.inRange(hsvImage, minValues, maxValues, mask);
                Mat dilateElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(24,24));
                Mat erodeElement = Imgproc.getStructuringElement(Imgproc.MORPH_RECT, new Size(12,12));
                Imgproc.erode(mask, output, erodeElement);
                Imgproc.erode(output, output, erodeElement);
                Imgproc.dilate(output, output, dilateElement);
                Imgproc.dilate(output, output, dilateElement);
                outputStream.putFrame(this.findBoxes(output, source));
            }
        });
        t.start();
	}
	
	private Mat findBoxes(Mat maskedImage, Mat frame) {
		List<MatOfPoint> contours = new ArrayList<>();
		Mat hierarchy = new Mat();
		Imgproc.findContours(maskedImage, contours, hierarchy, Imgproc.RETR_CCOMP, Imgproc.CHAIN_APPROX_SIMPLE);
		if (hierarchy.size().height > 0 && hierarchy.size().width > 0) {
			for (int idx = 0; idx >= 0; idx = (int) hierarchy.get(0,  idx)[0]) {
				Imgproc.drawContours(frame, contours, idx, new Scalar(255, 0, 0), 8);
			}
		}
		return frame;
	}

	private void detectAndDisplay(Mat frame) {
		MatOfRect cubes = new MatOfRect();
		Mat grayFrame = new Mat();
		Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY);
		Imgproc.equalizeHist(grayFrame, grayFrame);
		if (this.absoluteSize == 0) {
			int height = grayFrame.rows();
			if (Math.round(height * 0.2f) > 0) {
				this.absoluteSize = Math.round(height * 0.2f);
			}
		}
		this.cascade.detectMultiScale(grayFrame, cubes, 1.1, 2, 0 | Objdetect.CASCADE_SCALE_IMAGE,
				new Size(this.absoluteSize, this.absoluteSize), new Size());
		Rect[] cubeArray = cubes.toArray();
		for (int i = 0; i < cubeArray.length; i++) {
			Imgproc.rectangle(frame, cubeArray[i].tl(), cubeArray[i].br(), new Scalar(0, 255, 0, 255), 3);
		}
	}

	public void disabledInit() {
		if (theMessage.equals("")) {
			theMessage = DriverStation.getInstance().getGameSpecificMessage();
		}
	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
		if (theMessage.equals("")) {
			theMessage = DriverStation.getInstance().getGameSpecificMessage();
		}
	}

	public void autonomousInit() {
		if (theMessage.equals("")) {
			if(autonomousCommand != null) { 
				autonomousCommand.start();
			}
		}
	}
	             

	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
	}
}
