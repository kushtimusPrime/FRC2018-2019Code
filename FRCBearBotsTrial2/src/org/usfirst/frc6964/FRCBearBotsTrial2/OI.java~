// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6964.FRCBearBotsTrial2;

import org.usfirst.frc6964.FRCBearBotsTrial2.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Scheduler;

import org.usfirst.frc6964.FRCBearBotsTrial2.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton setAutonMiddle;
    public JoystickButton setAutonCorners;
    public JoystickButton nullifyY;
    public JoystickButton nullifyX;
    public Joystick driveJoystick;
    public JoystickButton handGrab;
    public JoystickButton handRelease;
    public Joystick armJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        armJoystick = new Joystick(1);
        
        handRelease = new JoystickButton(armJoystick, 3);
        handRelease.whenPressed(new HandOperation());
        handGrab = new JoystickButton(armJoystick, 1);
        handGrab.whenPressed(new HandOperation());
        driveJoystick = new Joystick(0);
        
        nullifyX = new JoystickButton(driveJoystick, 1);
        nullifyX.whileHeld(new DriveNullX());
        nullifyY = new JoystickButton(driveJoystick, 2);
        nullifyY.whileHeld(new DriveNullY());
        setAutonCorners = new JoystickButton(driveJoystick, 8);
        setAutonCorners.whenPressed(new Corner());
        setAutonMiddle = new JoystickButton(driveJoystick, 7);
        setAutonMiddle.whenPressed(new Middle());


        // SmartDashboard Buttons
        SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
        SmartDashboard.putData("DriveCommands", new DriveCommands());
        SmartDashboard.putData("Arm Commands", new ArmCommands());
        SmartDashboard.putData("Arm Movement", new ArmMovement());
        SmartDashboard.putData("Hand Operation", new HandOperation());
        SmartDashboard.putData("Corner", new Corner());
        SmartDashboard.putData("Middle", new Middle());
        SmartDashboard.putData("MoveForward", new MoveForward());
        SmartDashboard.putData("LeftTurn", new LeftTurn());
        SmartDashboard.putData("RightTurn", new RightTurn());
        SmartDashboard.putData("DriveNullY", new DriveNullY());
        SmartDashboard.putData("DriveNullX", new DriveNullX());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveJoystick() {
        return driveJoystick;
    }

    public Joystick getArmJoystick() {
        return armJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

