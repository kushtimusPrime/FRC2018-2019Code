// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6964.FRCBearBotsTrial2.commands;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc6964.FRCBearBotsTrial2.Robot;
import org.usfirst.frc6964.FRCBearBotsTrial2.RobotMap;

/**
 *
 */
public class HandOperation extends Command {
//	private boolean isClosed;
//	private boolean isOpen;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public HandOperation() {
//    	isClosed = false;
//    	isOpen = false;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.handSubsystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
		if (Robot.oi.handGrab.get()) { //if first button pressed, open
			RobotMap.handSubsystemLeftSolenoid.set(DoubleSolenoid.Value.kReverse);
			RobotMap.handSubsystemRightSolenoid.set(DoubleSolenoid.Value.kReverse);
//			DoubleSolenoid.Value leftHandStatus = RobotMap.handSubsystemLeftSolenoid.get();
//			DoubleSolenoid.Value rightHandStatus = RobotMap.handSubsystemRightSolenoid.get();
		}
		else if (Robot.oi.handRelease.get()) { //if second button pressed, close
			RobotMap.handSubsystemLeftSolenoid.set(DoubleSolenoid.Value.kForward);
			RobotMap.handSubsystemRightSolenoid.set(DoubleSolenoid.Value.kForward);
		}
//		else { //if no button, off
//			RobotMap.handSubsystemLeftSolenoid.set(DoubleSolenoid.Value.kOff);
//			RobotMap.handSubsystemRightSolenoid.set(DoubleSolenoid.Value.kOff);
//		}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
		RobotMap.handSubsystemLeftSolenoid.set(DoubleSolenoid.Value.kOff);
		RobotMap.handSubsystemRightSolenoid.set(DoubleSolenoid.Value.kOff);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
		RobotMap.handSubsystemLeftSolenoid.set(DoubleSolenoid.Value.kOff);
		RobotMap.handSubsystemRightSolenoid.set(DoubleSolenoid.Value.kOff);
    }
}
